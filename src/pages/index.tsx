import { GetServerSideProps, GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import styled from "styled-components";
import SubscribeButton from "../components/SubscribeButton";
import { stripe } from "../services/stripe";

interface IProps {
  product: {
    priceId: string;
    amount: number;
  };
}

export default function Home({ product }: IProps) {
  return (
    <>
      <Head>
        <title>Home | ig.news</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <StyledContainer>
        <StyledContentHero>
          <span>üëè Hey, welcome</span>
          <h1>
            News about the <span>React</span> world.
          </h1>
          <p>
            Get access to all the publications <br />
            <span>for {product.amount} month</span>
          </p>

          <SubscribeButton />
        </StyledContentHero>

        <img src="/images/avatar.svg" alt="Girl codding" />
      </StyledContainer>
    </>
  );
}

// #################################
// Client-side
// Server-side
// Static Site Generation
// #################################

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const price = await stripe.prices.retrieve("price_1MbaRfC95IPTeOKPqG5Kza90", {
//     expand: ["product"],
//   });

//   const product = {
//     priceId: price.id,
//     amount: new Intl.NumberFormat("en-US", {
//       style: "currency",
//       currency: "USD",
//     }).format((price.unit_amount as number) / 100),
//   };

//   return {
//     props: { product },
//   };
// };

// ISR
export const getStaticProps: GetStaticProps = async (context) => {
  const price = await stripe.prices.retrieve("price_1MbaRfC95IPTeOKPqG5Kza90", {
    expand: ["product"],
  });

  const product = {
    priceId: price.id,
    amount: new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format((price.unit_amount as number) / 100),
  };

  return {
    props: { product },
    revalidate: 60 * 60 * 24,
  };
};

const StyledContainer = styled.main`
  max-width: 1120px;
  height: calc(100vh - 5rem);
  padding: 0 2rem;
  margin: 0 auto;

  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const StyledContentHero = styled.section`
  max-width: 600px;

  > span {
    font-size: 1.5rem;
    font-weight: bold;
  }

  h1 {
    font-size: 4.5rem;
    line-height: 4.5rem;
    font-weight: 900;
    margin-top: 2.5rem;

    span {
      color: var(--cyan-500);
    }
  }

  p {
    font-size: 1.5rem;
    line-height: 2.25rem;
    margin-top: 1.5rem;

    span {
      color: var(--cyan-500);
      font-weight: 700;
    }
  }

  button {
    margin-top: 2.5rem;
  }
`;
